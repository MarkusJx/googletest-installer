name: 'Googletest installer'
description: 'Build and install googletest'
inputs:
  CC_path:
    description: 'A path to the CC compiler'
    required: false
    default: ''
  CXX_path:
    description: 'A path to the CXX compiler'
    required: false
    default: ''
  C_FLAGS:
    description: 'C flags to pass to the C compiler'
    required: false
    default: ''
  CXX_FLAGS:
    description: 'C++ flags to pass to the C++ compiler'
    required: false
    default: ''
  GENERATOR:
    description: 'The generator to use for code generation'
    required: false
    default: ''
runs:
  using: "composite"
  steps:
    - name: clone gtest
      run: git clone https://github.com/google/googletest
      shell: bash
    - name: echo CC and CXX
      run: echo CC_path set to ${{ inputs.CC_path }} and CXX_path set to ${{ inputs.CXX_path }}
      shell: bash
    - name: configure gtest
      run: |
        compiler=''
        if [ ! -z "${{ inputs.CC_path }}" ]; then
          compiler="-DCMAKE_C_COMPILER=${{ inputs.CC_path }}"
        fi

        if [ ! -z "${{ inputs.CXX_path }}" ]; then
          compiler="${compiler} -DCMAKE_CXX_COMPILER=${{ inputs.CXX_path }}"
        fi

        if [ ! -z "${{ inputs.C_FLAGS }}" ]; then
          compiler="${compiler} -DCMAKE_C_FLAGS=${{ inputs.C_FLAGS }}"
        fi

        if [ ! -z "${{ inputs.CXX_FLAGS }}" ]; then
          compiler="${compiler} -DCMAKE_CXX_FLAGS=${{ inputs.CXX_FLAGS }}"
        fi

        echo "cmake compiler set to: ${compiler}"

        if [ ! -z "${{ inputs.GENERATOR }}" ]; then
          export CMAKE_GENERATOR="${{ inputs.GENERATOR }}"
          echo "generator set to: ${{ inputs.GENERATOR }}"
        fi

        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake ${compiler} -DCMAKE_BUILD_TYPE=Release . -B build
        else
          sudo cmake ${compiler} -DCMAKE_BUILD_TYPE=Release . -B build
        fi
      working-directory: googletest
      shell: bash
    - name: build gtest
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake --build . --config Release
        else
          sudo cmake --build .
        fi
      working-directory: googletest/build
      shell: bash
    - name: copy deps
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo cp googletest/build/lib/*.a /usr/lib
          sudo ln -s /usr/lib/libgtest.a /usr/local/lib/libgtest.a
          sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a
          sudo ln -s /usr/lib/libgmock.a /usr/local/lib/libgmock.a
          sudo ln -s /usr/lib/libgmock_main.a /usr/local/lib/libgmock_main.a
          sudo cp -R googletest/googletest/include/gtest /usr/include
          sudo cp -R googletest/googlemock/include/gmock /usr/include
        elif [ "$RUNNER_OS" == "Windows" ]; then
          mkdir D:/gtest
          mkdir D:/gtest/lib
          mkdir D:/gtest/include
          mkdir D:/gmock
          mkdir D:/gmock/lib
          mkdir D:/gmock/include
          cp -R googletest/googletest/include/gtest D:/gtest/include
          cp -R googletest/googlemock/include/gmock D:/gmock/include
          cp googletest/build/lib/Release/gtest.lib D:/gtest/lib
          cp googletest/build/lib/Release/gtest_main.lib D:/gtest/lib
          cp googletest/build/lib/Release/gmock.lib D:/gmock/lib
          cp googletest/build/lib/Release/gmock_main.lib D:/gmock/lib
          cp googletest/build/lib/libgtest.a D:/gtest/lib
          cp googletest/build/lib/libgtest_main.a D:/gtest/lib
          cp googletest/build/lib/libgmock.a D:/gmock/lib
          cp googletest/build/lib/libgmock_main.a D:/gmock/lib
        else
          sudo cp googletest/build/lib/libgtest.a /usr/local/lib/libgtest.a
          sudo cp googletest/build/lib/libgtest_main.a /usr/local/lib/libgtest_main.a
          sudo cp googletest/build/lib/libgmock.a /usr/local/lib/libgmock.a
          sudo cp googletest/build/lib/libgmock_main.a /usr/local/lib/libgmock_main.a
          sudo cp -R googletest/googletest/include/gtest /usr/local/include
          sudo cp -R googletest/googlemock/include/gmock /usr/local/include
        fi
      shell: bash
    - name: clean up
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          rm -R googletest
        else
          sudo rm -R googletest
        fi
      shell: bash
branding:
  icon: activity
  color: gray-dark
